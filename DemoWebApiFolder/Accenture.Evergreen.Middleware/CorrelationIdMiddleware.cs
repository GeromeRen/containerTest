//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by evergreen tool.
//     NOTE:Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Accenture.Evergreen.Middleware
{
    using Accenture.Evergreen.Middleware.Models;
    using Microsoft.AspNetCore.Http;
    using Microsoft.Extensions.Options;
    using Microsoft.Extensions.Primitives;
    using System;
    using System.Threading.Tasks;

    /// <summary>
    /// Defines the <see cref="CorrelationIdMiddleware" />.
    /// </summary>
    public class CorrelationIdMiddleware
    {
        /// <summary>
        /// Defines the _next.
        /// </summary>
        private readonly RequestDelegate _next;

        /// <summary>
        /// Defines the _options.
        /// </summary>
        private readonly CorrelationIdMiddlewareOptions _options;

        /// <summary>
        /// Initializes a new instance of the <see cref="CorrelationIdMiddleware"/> class.
        /// </summary>
        /// <param name="next">The next<see cref="RequestDelegate"/>.</param>
        /// <param name="options">The options<see cref="IOptions{CorrelationIdMiddlewareOptions}"/>.</param>
        public CorrelationIdMiddleware(RequestDelegate next, IOptions<CorrelationIdMiddlewareOptions> options)
        {
            if(options == null)
            {
                throw new ArgumentNullException(nameof(options));
            }
            else
            {
                _options = options.Value;
            }

            _next = next ?? throw new ArgumentNullException(nameof(next));
        }

        /// <summary>
        /// The Invoke.
        /// </summary>
        /// <param name="context">The context<see cref="HttpContext"/>.</param>
        /// <returns>The <see cref="Task"/>.</returns>
        public Task Invoke(HttpContext context)
        {
            if(context.Request.Headers.TryGetValue(_options.Header, out StringValues correlationId))
            {
                // set the traceidentifier to the correlation id that was passed in with the request
                context.TraceIdentifier = correlationId;
            }
            // else use the TraceIdentifier as-is


            if(_options.IncludeInResponse)
            {
                // apply the correlation ID to the response header for client side tracking
                context.Response.OnStarting(() =>
                {
                    context.Response.Headers.Add(_options.Header, new[] { context.TraceIdentifier });
                    return Task.CompletedTask;
                });
            }

            return _next(context);
        }
    }
}
