//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by evergreen tool.
//     NOTE:Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Accenture.Evergreen.Middleware.Extensions
{
    using Microsoft.AspNetCore.Authentication.AzureAD.UI;
    using Microsoft.AspNetCore.Authentication.JwtBearer;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using System.Diagnostics.CodeAnalysis;
    using System.Threading.Tasks;

    /// <summary>
    /// Defines the <see cref="AuthValidationMiddlewareExtensions" />.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public static class AuthValidationMiddlewareExtensions
    {
        /// <summary>
        /// Method to explicity validate token parameters.
        /// </summary>
        /// <param name="services">.</param>
        /// <param name="config">.</param>
        /// <returns>.</returns>
        public static IServiceCollection AddAuthValidationMiddleware(this IServiceCollection services, IConfiguration config)
        {
            try
            {
                services.Configure<JwtBearerOptions>(AzureADDefaults.JwtBearerAuthenticationScheme, options =>
                {
                    // The valid audiences are both the Client ID (options.Audience) and api://{ClientID}
                    options.TokenValidationParameters.ValidAudiences = new string[]
                        {
                        options.Audience=config["AzureAd:ClientId"]

                        };

                    var existingOnTokenValidatedHandler = options.Events.OnTokenValidated;
                    options.Events.OnTokenValidated = async context =>
                    {
                        await existingOnTokenValidatedHandler(context);

                        //// your code to add/update extra claims that will be executed after the current event implementation.
                        ////Sample code snippet to demonstrate how to add new claims
                        //var claimsIdentity = (ClaimsIdentity)context.Principal.Identity;
                        ////add your custom claims here
                        //claimsIdentity.AddClaim(new Claim("ClaimName", "ClaimValue"));

                        await Task.FromResult(0);
                    };

                });
            }
            catch
            {

            }

            return services;
        }

        /// <summary>
        /// Auth middleware Extension for validating token parameters.
        /// </summary>
        /// <param name="builder">.</param>
        /// <returns>.</returns>
        public static IApplicationBuilder UseEvergreenMSALAspect(this IApplicationBuilder builder)
        {
            return builder.UseMiddleware<AuthValidationMiddleware>();
        }
    }
}
